#!/usr/bin/env bash
set -o errexit
set -o pipefail

# Start a Sauce tunnel, run tests, and tear the tunnel down.
# These need to be done in a single "step" on Circle CI,
# or else the tunnel will be leaked even if we terminate sc.

if [ "$SAUCE_BROWSER_VERSION" = latest ]; then
    SAUCE_BROWSER_VERSION=
fi

echo "Using browser: $JASMINE_BROWSER"
echo "Version: $SAUCE_BROWSER_VERSION"
echo


# Start Sauce Connect
outfile=`mktemp`
pidfile=`mktemp`
sc -u "$SAUCE_USERNAME" -k "$SAUCE_ACCESS_KEY" -X 4445 --pidfile "$pidfile" 2>&1 | tee "$outfile" &

while ! fgrep "Sauce Connect is up, you may start your tests." "$outfile" > /dev/null; do
    sleep 1
done

if ! nc -z localhost 4445; then
    echo "Can't connect to Sauce tunnel"
    killall sc
    exit 1
fi


# Run tests, proceeding to cleanup even if they fail
set +o errexit
USE_SAUCE=true npm run ci
exitcode=$?
set -o errexit


echo "Stopping Sauce Connect"
# Sauce Connect docs say that we can just kill -9 it if we don't care about
# failing any ongoing sessions. In practice, that sometimes works but usually
# leaks a tunnel so badly that you can't even stop it from the web UI. 
# Instead of doing that, we give Sauce Connect some time to shut down
# gracefully and then give up.
pid=$(cat "$pidfile")
tail -n 0 "$outfile"
kill -INT $pid

# Wait up to 30 seconds, then give up if it's still running
n=0
while [ $n -lt 30 ] && ps -p $pid > /dev/null; do
	sleep 1
	kill -INT $pid || true
	n=$(($n + 1))
done

if ps -p $pid > /dev/null; then
	echo "Could not shut down Sauce Connect"
fi

exit $exitcode
